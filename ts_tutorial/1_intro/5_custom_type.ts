/* Daha Ã¶nceden hep primitive type'larÄ± yani zaten mevcut olan
typelarÄ± kullanÄ±yorduk. Gerekli olduÄŸu durumlarda yeni typelar
tanÄ±mlayabiliriz. Bir type tanÄ±mlamak iÃ§in `type` ifadesi kullanÄ±lÄ±r,
sonra type'Ä±n ismini yazarÄ±z.

Not: Custom type'larÄ± deÄŸiÅŸkenlerden ayÄ±rt edebilmek iÃ§in
pascal case kullanÄ±rÄ±z ve sonuna da "Type" ekini ekleriz. Ã–rneÄŸin:
CategoryType, StudentType gibi. */

type StudentType = {
  name: string;
  lastname: string;
  school_no: number;
};

// AynÄ± const ifadelerinde olduÄŸu gibi custom type'larÄ± da export edebiliriz.
// BaÅŸka dosyalardan import ederken const import eder gibi import ediyoruz
// yani sÃ¼slÃ¼ parantez iÃ§erisinde. Ã–rn:
// import { CategoryType_1 } from "./5_custom_type"

export type CategoryType_1 = {
  data: {
    id: number;
    parent_id: null | number;
    name: string;
    slug: string;
    description: string;
    image: string;
    status: string;
    created_at: string;
    updated_at: string;
  }[];
  draw: number;
  recordsTotal: number;
  recordsFiltered: number;
  status: string;
};

const category_3: CategoryType_1 = {
  data: [],
  draw: 1,
  recordsFiltered: 10,
  recordsTotal: 10,
  status: "success",
};
console.warn("ğŸ”¥ | category_3:", category_3);
