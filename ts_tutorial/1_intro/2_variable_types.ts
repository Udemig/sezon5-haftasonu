/* Bir deÄŸiÅŸkenin tÃ¼rÃ¼nÃ¼ belirlemek iÃ§in deÄŸiÅŸken isminden sonra
iki nokta Ã¼stÃ¼ste yazÄ±lÄ±r ve sonra tÃ¼rÃ¼n ismi yazÄ±lÄ±r. Standart
tÃ¼rler aÅŸaÄŸÄ±da belirtilmiÅŸtir. */

let firstname3: string;
firstname3 = "ezgi";
firstname3 = "ismail";
firstname3 = "hakan";
console.warn("ğŸ”¥ | firstname3:", firstname3);

/* typeof ifadesi hem javascript hem typescript iÃ§erisinde mevcuttur.
Orjinaline javascriptten gelmiÅŸtir, typescriptin icat ettiÄŸi birÅŸey
deÄŸildir. Fakat javascript ve typescriptteki davranÄ±ÅŸlarÄ± farklÄ±dÄ±r.
Normal ÅŸartlarda javascript ile bir proje geliÅŸtirirken typeof ifadesini
pek kullanmayÄ±z (hatta hiÃ§ kullanmayÄ±z). Ama typescriptte iÅŸler deÄŸiÅŸiyor.

>> Typescript iÃ§erisinde typeof kullanÄ±mÄ±:

1- Typescriptte typeof ifadesini eÄŸer console.log iÃ§erisinde kullanÄ±rsak
yaptÄ±ÄŸÄ± tek iÅŸ kendisinden sonraki deÄŸeri veya deÄŸiÅŸkenin primitive tÃ¼rÃ¼nÃ¼
verir ve bu tÃ¼r ekrana yazÄ±lÄ±r. Ã–rneÄŸin aÅŸaÄŸÄ±daki kodun Ã§Ä±ktÄ±sÄ± ÅŸu ÅŸekildedir:

firstname3 type:  string

*/
console.log("firstname3 type: ", typeof firstname3);

/* 2- `if` iÃ§erisinde typeof kullanmak mÃ¼mkÃ¼ndÃ¼r. Bu bir deÄŸiÅŸkenin union
tÃ¼rÃ¼nden tanÄ±mlandÄ±ÄŸÄ± durumlarda tercih edilir. Ã–rneÄŸin aÅŸaÄŸÄ±daki
deÄŸiÅŸken string veya number alabilir. Bu deÄŸiÅŸkenin tÃ¼rÃ¼ne gÃ¶re
farklÄ± iÅŸlemler uygulanabilir. */

let input_age_1: string | number = "30";

/* if iÃ§erisinde typeof kullanÄ±lÄ±rsa burada typeof ifadesinden sonraki
deÄŸerin veya deÄŸiÅŸkenin tÃ¼rÃ¼nÃ¼n string halini verir. Yani "string", "number",
"boolean", "object", "null", "undefined" gibi. */
if (typeof input_age_1 === "string") {
  console.log("yaÅŸÄ±nÄ±zÄ±n yarÄ±sÄ±: ", parseInt(input_age_1) / 2);
} else if (typeof input_age_1 === "number") {
  console.log("yaÅŸÄ±nÄ±zÄ±n yarÄ±sÄ±: ", input_age_1 / 2);
}

switch (typeof input_age_1) {
  case "string":
    console.log("input_age_1'in tÃ¼rÃ¼ string'dir.");
    break;

  case "number":
    console.log("input_age_1'in tÃ¼rÃ¼ number'dÄ±r.");
    break;
}

/* Bu deÄŸiÅŸkene sadece string tÃ¼rden deÄŸerler atanabilir. Null veya
undefined veya baÅŸka bir tÃ¼rden deÄŸer atanamaz. */
// firstname3 = null; // error

let age3: number;
age3 = 10;
age3 = 20;
console.warn("ğŸ”¥ | age3:", age3);

/* Typescriptte type'lar iki kategoriye ayrÄ±labilir. Birincisi
primitive type'lar, ikincisi de advanced (custom) type'lar. Ä°lk
olarak primitive type'lardan bahsedelim.

- Primitive type:
    Javascript aslÄ±nda temel type'lara sahip bir dildir. Sadece
biz deÄŸiÅŸkenleri tanÄ±mlarken onlarÄ±n alabileceÄŸi type'larÄ± belirtemeyiz.
Bu type'lar o deÄŸiÅŸkenin sahip olduÄŸu deÄŸere gÃ¶re otomatik olarak
javascript tarafÄ±ndan belirtilir. AÅŸaÄŸÄ±da javascript'te default olarak
gelen type'lar gÃ¶sterilmektedir. (YÄ±ldÄ±z olanlar en Ã§ok kullanacaÄŸÄ±mÄ±z
type'lardÄ±r.)
    - string *
    - number *
    - boolean *
    - object *
    - null *
    - undefined *
    - bigint
    - symbol

*/

let did_attended_1: boolean = true;
console.warn("ğŸ”¥ | did_attended_1:", did_attended_1);

let student_1: object = {
  id: 1,
  firstname: "ahmet",
  lastname: "test",
};
console.warn("ğŸ”¥ | student_1:", student_1);

student_1 = {
  foo: "foo",
  bar: "bar",
};
console.warn("ğŸ”¥ | student_1:", student_1);

/* Normalde bu derste bir adet tÃ¼r tanÄ±mlamayÄ± gÃ¶sterdik fakat
aÅŸaÄŸÄ±daki Ã¶rnekteki gibi birden fazla tÃ¼rÃ¼ de kullanmak mÃ¼mkÃ¼n.
Bu ÅŸekildeki pipe iÅŸaretiyle birleÅŸtirilerek type tanÄ±mlama
yÃ¶ntemine "union type" denir. Bu konuyu ilerleyen derslerde
daha detaylÄ± bir ÅŸekilde iÅŸleyeceÄŸiz. */
let not_cared_person_1: string | null = "test";
console.warn("ğŸ”¥ | not_cared_person_1:", not_cared_person_1);

/* Bu deÄŸiÅŸkenin tÃ¼rÃ¼ union olduÄŸu iÃ§in (yani farklÄ± tÃ¼rlerde
deÄŸer alabildiÄŸi iÃ§in) null atamasÄ± yapabiliriz. */
not_cared_person_1 = null;
